type UserAgreement {
  id: ID
  status: Status
  user: User
}

type AditionalInfo {
  name: String
  description: String
  id: ID
}

type Comment {
  user: UserAgreement
  title: String
  comment: String
}

type Workplace {
  workId: ID
  name: String
}

type User {
  userId: ID
  name: String
  family_name: String
  icon: AWSURL
}

type Profile {
  iban: String
  id_number: String
  profile_picture: AWSURL
  first_name: String
  last_name: String
  email: AWSEmail
  email_verified: Boolean
  phone_number: String
  birthdate: String
  locale: String
  nationality: String
}

type UserSettings {
  timeFormat: String
  timeZone: String
  dateFormat: String
  modalSendConfirm: Boolean
  modalConfirmConfirm: Boolean
}

type CostRate {
  amount: Int
  currency: String
}

type UserMemberships {
  hourlyRate: HourlyRate
  costRate: CostRate
  membershipStatus: String
  membershipType: String
  userId: ID
  targetId: ID
}

type TimeInterval {
  end: AWSDateTime
  start: AWSDateTime
}

type Break {
  id: ID
  reason: Breakreason
  end: AWSDateTime
  start: AWSDateTime
}

type WorkspaceSettings {
  shortBreak: Int
  dinnerBreak: Int
}

type Membership {
  hourlyRate: HourlyRate
  membershipType: String
  membershipStatus: String
  userId: ID
  targetId: String
}

type HourlyRate {
  amount: Int
  currency: String
}

type Work {
  name: String
  description: String
  id: ID
}

type WorkCard {
  id: String
  cardend: AWSDateTime
  type: Cardtype
  drivinglicense: [Drivingtype]
  owncar: Boolean
  othercard: String
  files: [String]
}

type OwnCar {
  description: String
  id: ID
  plate: String
  class: String
}

type RoutePoints {
  id: ID
  comment: String
  address: String
  lat: Float
  lng: Float
}

enum Classification {
  ADMINISTRATIVESERVICE
  ITDEVICEANDSOFTWAREEXPENSES
  MARKETINGEXPENSES
  MEETINGEXPENSES
  PREMISESEXPENSES
  TRAVELEXPENSES
  VEHICLEEXPENSES
}

enum Drivingtype {
  A
  A1
  A2
  B
  B1
  C
  C1
  CE
  D
  D1
}

enum Cardtype {
  ID
  PASSPORT
  DRIVING
  HYGIENEPASS
  WORKSAFETYPASS
  FIREWORKCARD
  ELECTRICALSAFETYPASS
  VISA
  OTHER
}

enum Status {
  COMPLETE
  ACTIVE
  INWAITTING
}

enum Breakreason {
  LUNCH
  LUNCH_L
  SHORT
  LONG
  GOING
  ACCIDENT
}

enum UserAgreementStatus {
  ACTIVE
  DISABLED
  DELETED
}

enum PaymentMethod {
  CASH
  OWNCARD
  COMPANYCARD
  BANKTRANSFER
  OTHER
}

enum Currency {
  EUR
  USD
  GBP
  CHF
  SEK
  NOK
}

type Worktravel
  @model
  @auth(
    rules: [
      { allow: owner, ownerField: "userId" }
      { allow: groups, groups: ["Admins"], operations: [read, create, update, delete] }
      { allow: groups, groups: ["Clients"], operations: [read, update] }
    ]
  ) {
  id: ID!
  userId: String
  created: AWSDateTime
  updated: AWSDateTime
  title: String
  comment: String
  departureDateTime: AWSDateTime
  returnDateTime: AWSDateTime
  routeCar: String
  routePoints: [RoutePoints]
  attachments: [String]
}

type Receipt
  @model
  @auth(
    rules: [
      { allow: owner, ownerField: "userId" }
      { allow: groups, groups: ["Admins"], operations: [read, create, update, delete] }
      { allow: groups, groups: ["Clients"], operations: [read, update] }
    ]
  ) {
  id: ID!
  userId: String
  created: AWSDateTime
  updated: AWSDateTime
  dateOfPurchase: AWSDateTime
  placeOfPurchase: String
  receiptNumber: String
  class: Classification
  price: Float
  currency: Currency
  receiptImage: [String]
  tax: Float
  paymentMethod: PaymentMethod
  comment: String
}

type Agreement
  @model
  @auth(
    rules: [
      { allow: owner, ownerField: "userId" }
      { allow: groups, groups: ["Workers"], operations: [read, update] }
      { allow: groups, groups: ["Clients"], operations: [read, update] }
      { allow: groups, groups: ["Admins"], operations: [read, create, update, delete] }
    ]
  ) {
  id: ID!
  name: String
  workers: [ID]
  client: [ID]
  createdAt: AWSDateTime
  userId: String
  user: User
  aditionalInfo: [AditionalInfo]
  userAgreement: [UserAgreement]
  workspaceId: [ID]
}

type Tasks
  @model
  @auth(
    rules: [
      { allow: owner, ownerField: "username" }
      { allow: groups, groups: ["Admins"], operations: [read, create, update, delete] }
    ]
  ) {
  id: ID!
  title: String
  description: String
  username: String
  user: User
  time: AWSTime
  status: Status
  workplace: Workplace
  interval: TimeInterval
  comments: [Comment]
}
type TimeEntry
  @model
  @auth(
    rules: [
      { allow: owner, ownerField: "userId" }
      { allow: groups, groups: ["Admins"], operations: [read, create, update, delete] }
      { allow: groups, groups: ["Clients"], operations: [read, update] }
    ]
  ) {
  id: ID!
  description: String
  userId: String
  workspaceId: ID
  timeInterval: TimeInterval
  isActive: Boolean
  isLocked: Boolean
  paidAt: AWSDateTime
  confirmedAt: AWSDateTime
  isSent: Boolean
  isConfirmed: Boolean
  isPaused: Boolean
  pauseStart: AWSDateTime
  break: [Break]
  work: Work
}

type AllWorkSpaces
  @model
  @auth(
    rules: [
      { allow: owner, ownerField: "workers", operations: [read] }
      { allow: owner, ownerField: "adminId", operations: [read, update] }
      { allow: groups, groups: ["Admins"], operations: [read, create, update, delete] }
    ]
  ) {
  id: ID!
  hourlyRate: HourlyRate
  imageUrl: AWSURL
  memberships: [Membership]
  name: String
  workspaceSettings: WorkspaceSettings
  workers: [String]
  adminId: [String]
  work: [Work]
}

type UserCredentials
  @model
  @auth(
    rules: [
      { allow: owner, ownerField: "userId", operations: [read, create, update, delete] }
      { allow: groups, groups: ["Admins"], operations: [read, create, update, delete] }
      { allow: groups, groups: ["Clients"], operations: [read] }
    ]
  ) {
  id: ID!
  userId: String
  activeTimeEntry: ID
  status: UserAgreementStatus
  defaultWorkspace: ID
  memberships: [UserMemberships]
  profile: Profile
  formChecked: [String]
  settings: UserSettings
  workcards: [WorkCard]
  ownCars: [OwnCar]
}
