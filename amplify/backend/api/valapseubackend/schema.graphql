type UserAgreement {
  id: ID
  status: Status
  addedAt: AWSDateTime
  user: User
  title: String
  description: String
}

type SubInfo {
  title: String
  description: String
  user: UserAgreement
  createdAt: AWSDateTime
  id: ID!
}

type Agreement @model @auth(rules: [{allow: groups, groups: ["Admins"], operations: [read, create, update, delete]}, {allow: groups, groups: ["Clients"], operations: [read, update]}, {allow: groups, groups: ["Workers"], operations: [read]}]) {
  id: ID!
  title: String
  description: String
  createdAt: AWSDateTime
  user: User
  subInfo: [SubInfo]
}

type Comment {
  user: UserAgreement
  title: String
  comment: String
}

type Workplace {
  workId: ID
  name: String
}

type User {
  userId: ID
  name: String
  family_name: String
  icon: AWSURL
}

enum Status {
  COMPLETE
  ACTIVE
  INWAITTING
}

type Tasks @model @auth(rules: [{allow: owner, ownerField: "username"}, {allow: groups, groups: ["Admins"], operations: [read, create, update, delete]}]) {
  id: ID!
  title: String
  description: String
  username: String
  user: User
  time: AWSTime
  status: Status
  workplace: Workplace
  interval: TimeInterval
  comments: [Comment]
}

type Profile {
  profile_picture: AWSURL
  first_name: String
  last_name: String
  email: AWSEmail
}

type UserSettings {
  timeFormat: String
  timeZone: String
  dateFormat: String
  modalSendConfirm: Boolean
  modalConfirmConfirm: Boolean
}

type CostRate {
  amount: Int
  currency: String
}

type UserMemberships {
  hourlyRate: HourlyRate
  costRate: CostRate
  membershipStatus: String
  membershipType: String
  userId: ID
  targetId: ID
}

type TimeInterval {
  duration: String
  end: AWSDateTime
  start: AWSDateTime
}

type TimeEntry @model @auth(rules: [{allow: owner}, {allow: groups, groups: ["Admins"], operations: [read, create, update, delete]}, {allow: groups, groups: ["Clients"], operations: [read, update]}]) {
  id: ID!
  description: String
  userId: ID
  workspaceId: ID
  timeInterval: TimeInterval
  isActive: Boolean
  isLocked: Boolean
  isSent: Boolean
  isConfirmed: Boolean
  billable: Boolean
}

type WorkspaceSettings {
  shortBreak: Int
  dinnerBreak: Int
}

type Membership {
  hourlyRate: HourlyRate
  membershipType: String
  membershipStatus: String
  userId: ID
  targetId: String
}

type HourlyRate {
  amount: Int
  currency: String
}

type AllWorkSpaces @model @auth(rules: [{allow: groups, groups: ["Admins"], operations: [read, create, update, delete]}, {allow: groups, groups: ["Workers"], operations: [read]}, {allow: groups, groups: ["Clients"], operations: [read]}]) {
  id: ID!
  hourlyRate: HourlyRate
  imageUrl: AWSURL
  memberships: [Membership]
  name: String
  workspaceSettings: WorkspaceSettings
  clientId: [ID]
  adminId: [ID]
  managerId: [ID]
}

type UserCredentials @model @auth(rules: [{allow: owner}, {allow: groups, groups: ["Admins"], operations: [read, create, update, delete]}, {allow: groups, groups: ["Clients"], operations: [update, read]}]) {
  id: ID!
  userId: ID!
  activeTimeEntry: ID
  status: String
  defaultWorkspace: ID
  memberships: [UserMemberships]
  profile: Profile
  formChecked: [String]
  settings: UserSettings
  agreement: UserAgreement
}

type FormItem {
  name: String
  text: String
}
 