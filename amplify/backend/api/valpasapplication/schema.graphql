type UserAgreement {
  id: ID
  status: Status
  user: User
}

type AditionalInfo {
  name: String
  description: String
  id: ID
}

type Comment {
  user: UserAgreement
  title: String
  comment: String
}

type Workplace {
  workId: ID
  name: String
}

type User {
  userId: ID
  name: String
  family_name: String
  icon: AWSURL
}

enum Status {
  COMPLETE
  ACTIVE
  INWAITTING
}

type Profile {
  profile_picture: AWSURL
  first_name: String
  last_name: String
  email: AWSEmail
}

type UserSettings {
  timeFormat: String
  timeZone: String
  dateFormat: String
  modalSendConfirm: Boolean
  modalConfirmConfirm: Boolean
}

type CostRate {
  amount: Int
  currency: String
}

type UserMemberships {
  hourlyRate: HourlyRate
  costRate: CostRate
  membershipStatus: String
  membershipType: String
  userId: ID
  targetId: ID
}

type TimeInterval {
  end: AWSDateTime
  start: AWSDateTime
}

type Break {
  duration: String
  end: AWSDateTime
  start: AWSDateTime
}

type WorkspaceSettings {
  shortBreak: Int
  dinnerBreak: Int
}

type Membership {
  hourlyRate: HourlyRate
  membershipType: String
  membershipStatus: String
  userId: ID
  targetId: String
}

type HourlyRate {
  amount: Int
  currency: String
}

type Agreement
  @model
  @auth(
    rules: [
      { allow: owner, ownerField: "userId" }
      { allow: groups, groups: ["Workers"], operations: [read, update] }
      { allow: groups, groups: ["Clients"], operations: [read, update] }
      { allow: groups, groups: ["Admins"], operations: [read, create, update, delete] }
    ]
  ) {
  id: ID!
  name: String
  workers: [ID]
  client: [ID]
  createdAt: AWSDateTime
  userId: String
  user: User
  aditionalInfo: [AditionalInfo]
  userAgreement: [UserAgreement]
  workspaceId: [ID]
}

type Tasks
  @model
  @auth(
    rules: [
      { allow: owner, ownerField: "username" }
      { allow: groups, groups: ["Admins"], operations: [read, create, update, delete] }
    ]
  ) {
  id: ID!
  title: String
  description: String
  username: String
  user: User
  time: AWSTime
  status: Status
  workplace: Workplace
  interval: TimeInterval
  comments: [Comment]
}
type TimeEntry
  @model
  @auth(
    rules: [
      { allow: owner, ownerField: "userId" }
      { allow: groups, groups: ["Admins"], operations: [read, create, update, delete] }
      { allow: groups, groups: ["Clients"], operations: [read, update] }
    ]
  ) {
  id: ID!
  description: String
  userId: String
  workspaceId: ID
  timeInterval: TimeInterval
  isActive: Boolean
  isLocked: Boolean
  isSent: Boolean
  isConfirmed: Boolean
  break: [Break]
  isPaused: Boolean
  pauseStart: AWSDateTime
  nextEntry: ID
  lastEntry: ID
}

type AllWorkSpaces
  @model
  @auth(
    rules: [
      { allow: owner, ownerField: "workers", operations: [read] }
      { allow: owner, ownerField: "adminId", operations: [read, update] }
      { allow: groups, groups: ["Admins"], operations: [read, create, update, delete] }
    ]
  ) {
  id: ID!
  hourlyRate: HourlyRate
  imageUrl: AWSURL
  memberships: [Membership]
  name: String
  workspaceSettings: WorkspaceSettings
  workers: [String]
  adminId: [String]
}

type UserCredentials
  @model
  @auth(
    rules: [
      { allow: owner, ownerField: "userId", operations: [read, create, update, delete] }
      { allow: groups, groups: ["Admins"], operations: [read, create, update, delete] }
      { allow: groups, groups: ["Clients"], operations: [read] }
    ]
  ) {
  id: ID!
  userId: String
  activeTimeEntry: ID
  status: String
  defaultWorkspace: ID
  memberships: [UserMemberships]
  profile: Profile
  formChecked: [String]
  settings: UserSettings
}
